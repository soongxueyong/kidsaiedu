{
  "captionData": [
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "\u8fd9\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u610f\u8bc6\u5230\uff0c\n\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u975e\u7ebf\u6027\u95ee\u9898\u3002", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7279\u5f81\u4ea4\u53c9\u4e58\u79ef\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "\u4f46\u5982\u679c\u9047\u5230\u7a0d\u5fae\u590d\u6742\u70b9\u7684\u95ee\u9898\uff0c\n\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "\u6bd4\u5982\u50cf\u8fd9\u6837\u7684\u95ee\u9898\u3002", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bb2\uff0c\u6211\u4eec\u5f97\u5230\u7684\n\u53ef\u80fd\u662f\u4e00\u79cd\u4e92\u76f8\u4ea4\u9519\u7684\u87ba\u65cb\u7ec4\u5408\u3002", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u80fd\u8981\u5148\u505c\u4e0b\u6765\uff0c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\n\u7136\u540e\u601d\u8003\u4e00\u4e0b\u5982\u4f55\u6dfb\u52a0\u6b63\u786e\u7684\u7279\u5f81\u4ea4\u53c9\u4e58\u79ef\u3002", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "\u4f46\u5f88\u663e\u7136\uff0c\u6211\u4eec\u7684\u6570\u636e\u96c6\u53ef\u80fd\u4f1a\u8d8a\u6765\u8d8a\u590d\u6742\u3002", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "\u6700\u7ec8\u6211\u4eec\u8fd8\u662f\u5e0c\u671b\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff0c\n\u8ba9\u6a21\u578b\u81ea\u884c\u5b66\u4e60\u975e\u7ebf\u6027\u89c4\u5f8b\uff0c\n\u800c\u4e0d\u7528\u6211\u4eec\u624b\u52a8\u4e3a\u5b83\u4eec\u6307\u5b9a\u53c2\u6570\u3002", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "\u8fd9\u4e00\u613f\u666f\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6765\u5b9e\u73b0\uff0c\n\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u975e\u5e38\u51fa\u8272\u5730\u5904\u7406\u590d\u6742\u6570\u636e\uff0c\n\u4f8b\u5982\u56fe\u7247\u6570\u636e\u3001\u97f3\u9891\u6570\u636e\u4ee5\u53ca\u89c6\u9891\u6570\u636e\u7b49\u7b49\u3002", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "\u6211\u4eec\u5c06\u5728\u8fd9\u4e00\u90e8\u5206\u8be6\u7ec6\u4e86\u89e3\u795e\u7ecf\u7f51\u7edc\u3002", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u81ea\u884c\u5b66\u4e60\u975e\u7ebf\u6027\u89c4\u5f8b\uff0c\n\u800c\u4e0d\u7528\u6211\u4eec\u624b\u52a8\u4e3a\u5b83\u4eec\u6307\u5b9a\u53c2\u6570\u3002", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "\u90a3\u4e48\u6211\u4eec\u8be5\u600e\u4e48\u505a\u5462\uff1f", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "\u6211\u4eec\u53ef\u80fd\u9700\u8981\u7ed9\u6a21\u578b\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7ed3\u6784\u3002", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "\u73b0\u5728\u6765\u770b\u770b\u6211\u4eec\u7684\u7ebf\u6027\u6a21\u578b\u3002", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "\u8be5\u6a21\u578b\u4e2d\u6709\u4e00\u4e9b\u8f93\u5165\uff0c\n\u6bcf\u4e2a\u8f93\u5165\u90fd\u5177\u6709\u4e00\u4e2a\u6743\u91cd\uff0c\n\u8fd9\u4e9b\u6743\u91cd\u4ee5\u7ebf\u6027\u65b9\u5f0f\u7ed3\u5408\u5230\u4e00\u8d77\u4ea7\u751f\u8f93\u51fa\u3002", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "\u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97\u975e\u7ebf\u6027\u89c4\u5f8b\uff0c\n\u5219\u53ef\u80fd\u9700\u8981\u5411\u8be5\u6a21\u578b\u518d\u6dfb\u52a0\u4e00\u4e2a\u5c42\u3002", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u826f\u597d\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\n\u5c06\u8fd9\u4e9b\u8f93\u5165\u6dfb\u52a0\u5230\u7b2c\u4e8c\u5c42\u3002", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "\u7b2c\u4e8c\u5c42\u518d\u4ee5\u7ebf\u6027\u65b9\u5f0f\u76f8\u7ed3\u5408\uff0c\n\u4f46\u6211\u4eec\u5c1a\u672a\u5b9e\u73b0\u4efb\u4f55\u975e\u7ebf\u6027\u89c4\u5f8b\u3002", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "\u56e0\u4e3a\u7ebf\u6027\u51fd\u6570\u7684\u7ebf\u6027\u7ec4\u5408\u4f9d\u7136\u662f\u7ebf\u6027\u3002", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "\u8fd9\u8fd8\u4e0d\u591f\u3002\u5f88\u660e\u663e\uff0c\n\u6211\u4eec\u8fd8\u9700\u8981\u518d\u6dfb\u52a0\u4e00\u5c42\uff0c\u5bf9\u5427\uff1f", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "\u6211\u4eec\u5728\u6a21\u578b\u4e2d\u518d\u6dfb\u52a0\u4e00\u5c42\u540e\uff0c\n\u8be5\u6a21\u578b\u4f9d\u65e7\u662f\u7ebf\u6027\u6a21\u578b\u3002", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "\u56e0\u4e3a\u5373\u4fbf\u6211\u4eec\u6dfb\u52a0\u4efb\u610f\u591a\u7684\u5206\u5c42\uff0c\n\u6240\u6709\u7ebf\u6027\u51fd\u6570\u7684\u7ec4\u5408\u4f9d\u7136\u662f\u7ebf\u6027\u51fd\u6570\u3002", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u8981\u4ece\u5176\u4ed6\u65b9\u9762\u7740\u624b\u3002", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "\u6240\u8c13\u7684\u4ece\u5176\u4ed6\u65b9\u9762\u7740\u624b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\n\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u975e\u7ebf\u6027\u51fd\u6570\u3002", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "\u8fd9\u79cd\u975e\u7ebf\u6027\u51fd\u6570\u53ef\u4f4d\u4e8e\u4efb\u4f55\u5c0f\u7684\u9690\u85cf\u5f0f\u8282\u70b9\u7684\u8f93\u51fa\u4e2d\u3002", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "\u5176\u4e2d\u4e00\u79cd\u5e38\u7528\u7684\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u53eb\u505aReLU\u3002", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "\u5b83\u4f1a\u63a5\u53d7\u7ebf\u6027\u51fd\u6570\uff0c\u5e76\u5728\u96f6\u503c\u5904\u5c06\u5176\u622a\u65ad\u3002", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "\u5982\u679c\u8fd4\u56de\u503c\u5728\u96f6\u503c\u4ee5\u4e0a\uff0c\u5219\u4e3a\u7ebf\u6027\u51fd\u6570\u3002\n\u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u5c0f\u4e8e\u96f6\uff0c\u5219\u8f93\u51fa\u4e3a\u96f6\u3002", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "\u8fd9\u662f\u4e00\u79cd\u6700\u7b80\u5355\u7684\u975e\u7ebf\u6027\u51fd\u6570\uff0c\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u521b\u5efa\u975e\u7ebf\u6027\u6a21\u578b\u3002", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u975e\u7ebf\u6027\u51fd\u6570\uff0c\u5f88\u591a\u4eba[\u542c\u4e0d\u6e05\u695a]\uff0c\n\u4f46\u4e8b\u5b9e\u4e0aReLU\u53ef\u4ee5\u63d0\u4f9b\u5173\u4e8e\u5f88\u591a\u95ee\u9898\u7684\u5148\u8fdb\u7814\u7a76\u6210\u679c\uff0c\n\u800c\u4e14\u64cd\u4f5c\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5c42\u7ea7\u5806\u53e0\u8d77\u6765\uff0c\n\u5e76\u521b\u5efa\u4efb\u610f\u590d\u6742\u7a0b\u5ea6\u7684\u795e\u7ecf\u7f51\u7edc\u3002", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "\u73b0\u5728\uff0c\u5f53\u6211\u4eec\u8bad\u7ec3\u8fd9\u4e9b\u795e\u7ecf\u7f51\u7edc\u65f6\uff0c\n\u5f88\u663e\u7136\uff0c\u6211\u4eec\u9762\u4e34\u7684\u662f\u975e\u51f8\u4f18\u5316\u95ee\u9898\uff0c\u56e0\u6b64\u53ef\u80fd\u9700\u8981\u521d\u59cb\u5316\u3002", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "\u6211\u4eec\u8bad\u7ec3\u8fd9\u4e9b\u795e\u7ecf\u7f51\u7edc\u65f6\u4f7f\u7528\u7684\u65b9\u6cd5\u53eb\u505a\u53cd\u5411\u4f20\u64ad\uff0c\n\u5b83\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u7684\u53d8\u5f62\u3002", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "\u800c\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\uff0c\u6211\u4eec\u80fd\u591f\u4ee5\u5408\u7406\u9ad8\u6548\u7684\u65b9\u5f0f\uff0c\n\u5bf9\u975e\u51f8\u4f18\u5316\u95ee\u9898\u6267\u884c\u68af\u5ea6\u4e0b\u964d\u3002", 
          "start": 161.52
        }
      ], 
      "lang": "zh-Hans"
    }, 
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "At this point, we should recognize this problem as a simple, non-linear problem.", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "Something that we can solve easily with feature cross products.", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "But what happens if we get a slightly more complicated problem?", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "Maybe something that looks like this.", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "At some level we&#39;ve got maybe a set of spirals interacting with each other.", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "Now we can probably sit around and do some math and think of the right feature cross products to add.", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "But it&#39;s easy to think that our data sets might be more and more complicated.", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "And eventually we would like some way for our models to learn the non-linearities themselves without us having to specify them manually.", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "This is the promise of deep neural nets, that do an especially good job at complex data, including image data, audio data, and video data.", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "We&#39;ll learn more about neural nets in this section.", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "So we&#39;d like to have models that learn the non-linearities themselves, without us having to specify them manually.", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "How are we gonna to do that?", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "Well we probably need a model with some additional structure to it.", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "Let&#39;s take a look at our linear model.", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "Where we have a number of inputs, each with a weight that&#39;s combined linearly, to produce an output.", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "Well, if we wanna get a non-linearity in there, maybe we need to have an additional layer in there.", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "So now we can add those guys up in a nice linear combination, into a second layer.", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "That second layer gets linear combined and we haven&#39;t yet achieved any non-linearity.", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "Because a linear combination of linear functions is still linear.", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "Well, that&#39;s not good enough, so clearly what we need is a second layer right?", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "So we put a second layer in there and.. we&#39;re still linear.", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "Because even if we add as many layers as we want, any linear combinations of linear functions is still gonna be linear.", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "Okay, we need to do something else.", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "And that something else is we need to stick in a non-linearity.", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "That non-linearity can go at the output of any of our little hidden notes in there.", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "One common non-linearity that we use is called ray lou.", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "And this takes a linear function, and chops it off at zero.", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "So if you&#39;re above zero, you&#39;re a linear function; if your function returns a value below zero, we cap that at zero.", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "Simplest possible non-linear function, and this allows us to create non-linear models.", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "Now we could use any non-linearity in here, a lot of folks also use [unintelligible], but it turns out that ray lou gives state of the art results for a wide number of problems, and it&#39;s very simple.", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "Once we had this, we can stack these layers up and we can create arbitrarily complicated neural networks.", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "Now when we train these neural nets, obviously we are in a non convex optimization, so initialization may matter.", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "The method that we use for training these, is a variant of gradient descent, called back propagation.", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "And back propagation essentially allows us to do gradient descent in this non convex optimization in a reasonably efficient manner.", 
          "start": 161.52
        }
      ], 
      "lang": "en"
    }, 
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "\u00c0 ce stade, nous devrions pouvoir reconna\u00eetre\nqu&#39;il s&#39;agit d&#39;un probl\u00e8me non lin\u00e9aire simple,", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "qui peut \u00eatre r\u00e9solu facilement\navec des produits de croisement de caract\u00e9ristiques.", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "Mais que se passe-t-il\nlorsque le probl\u00e8me est un peu plus complexe\u00a0?", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "Par exemple, si nous avons quelque chose comme \u00e7a.", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "Dans une certaine mesure, nous voyons\ndes spirales en interaction les unes avec les autres.", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "Nous pourrions certainement r\u00e9fl\u00e9chir aux produits\nde croisement de caract\u00e9ristiques que nous pourrions ajouter.", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "Mais on peut facilement imaginer que nos ensembles\nde donn\u00e9es risquent de devenir de plus en plus complexes.", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "Au final, nous voudrions que nos mod\u00e8les apprennent les non-lin\u00e9arit\u00e9s\npar eux-m\u00eames, sans que nous ayons \u00e0 les indiquer manuellement.", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "C&#39;est ce que promettent les r\u00e9seaux de neurones profonds, qui fonctionnent tr\u00e8s bien\navec les donn\u00e9es complexes, notamment les donn\u00e9es image, audio et vid\u00e9o.", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "Nous en apprendrons davantage\nsur les r\u00e9seaux de neurones dans cette vid\u00e9o.", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "Nous aimerions donc avoir des mod\u00e8les qui apprennent les non-lin\u00e9arit\u00e9s\npar eux-m\u00eames, sans que nous ayons besoin de leur indiquer manuellement.", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "Comment allons-nous faire\u00a0?", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "Nous avons probablement besoin\nd&#39;un mod\u00e8le dot\u00e9 d&#39;une structure suppl\u00e9mentaire.", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "Observons notre mod\u00e8le lin\u00e9aire.", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "Il comporte plusieurs entr\u00e9es, chacune avec une pond\u00e9ration\ncombin\u00e9e de fa\u00e7on lin\u00e9aire, pour produire un r\u00e9sultat.", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "Si nous voulons y ajouter une non-lin\u00e9arit\u00e9,\nnous devons peut-\u00eatre lui ajouter une couche suppl\u00e9mentaire.", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "Nous pouvons les ajouter dans une\ncombinaison lin\u00e9aire, dans une deuxi\u00e8me couche.", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "Cette seconde couche est combin\u00e9e de fa\u00e7on lin\u00e9aire,\net nous n&#39;avons pas obtenu de non-lin\u00e9arit\u00e9.", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "Parce qu&#39;une combinaison lin\u00e9aire\nde fonctions lin\u00e9aires est toujours lin\u00e9aire.", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "Ce n&#39;est pas suffisant.\nIl nous faut une 2e couche. D&#39;accord\u00a0?", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "Ajoutons donc une deuxi\u00e8me couche et\u2026\nCela reste lin\u00e9aire.", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "Quel que soit le nombre de couches que nous ajoutons,\nune combinaison lin\u00e9aire de fonctions lin\u00e9aires sera toujours lin\u00e9aire.", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "Nous devons proc\u00e9der autrement.", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "Nous devons ajouter une non-lin\u00e9arit\u00e9.", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "Celle-ci peut \u00eatre plac\u00e9e au niveau du r\u00e9sultat\nde n&#39;importe laquelle de nos petites notes.", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "Une non-lin\u00e9arit\u00e9 couramment utilis\u00e9e est la fonction ReLU.", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "Elle consiste \u00e0 prendre une fonction lin\u00e9aire\net \u00e0 l&#39;interrompre \u00e0 z\u00e9ro.", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "Au-dessus de z\u00e9ro, c&#39;est une fonction lin\u00e9aire,\nmais si la fonction renvoie une valeur n\u00e9gative, celle-ci est limit\u00e9e \u00e0 z\u00e9ro.", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "C&#39;est la fonction non lin\u00e9aire la plus simple qui soit,\net elle nous permet de cr\u00e9er des mod\u00e8les non lin\u00e9aires.", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "Nous pourrions utiliser n&#39;importe quelle non-lin\u00e9arit\u00e9. Beaucoup utilisent\nla fonction sigmo\u00efde, mais la fonction ReLU offre des r\u00e9sultats excellents\npour un grand nombre de probl\u00e8mes, et elle est tr\u00e8s simple.", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "Une fois que nous l&#39;avons appliqu\u00e9e, nous pouvons empiler\nces couches et cr\u00e9er des r\u00e9seaux de neurones arbitrairement complexes.", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "Lorsque nous formons ces r\u00e9seaux de neurones, nous sommes \u00e9videmment\ndans une optimisation non convexe. L&#39;initialisation peut donc avoir son importance.", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "Pour les former, nous utilisons une variante\nde la descente de gradient, appel\u00e9e r\u00e9tropropagation.", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "La r\u00e9tropropagation nous permet principalement de r\u00e9aliser une descente de gradient\nau sein de cette optimisation non convexe de fa\u00e7on raisonnablement efficace.", 
          "start": 161.52
        }
      ], 
      "lang": "fr"
    }, 
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "Pada titik ini, kita semestinya\nmengenali masalah ini sebagai\nmasalah sederhana non-linear.", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "Yang bisa diselesaikan dengan mudah\nmenggunakan produk persilangan fitur.", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "Tapi, bagaimana jika\nmasalahnya sedikit lebih rumit?", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "Mungkin terlihat seperti ini.", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "Pada beberapa tingkat kita mungkin punya\nset spiral yang saling berinteraksi.", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "Mungkin kita bisa santai lalu\nmenghitung dan memikirkan\nproduk persilangan fitur yang tepat\nuntuk ditambahkan.", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "Tapi besar kemungkinan bahwa\nset data kita bisa lebih rumit lagi.", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "Pada akhirnya kita perlu cara agar model\nbisa belajar non-linearitas secara mandiri\ntanpa perlu kita tentukan secara manual.", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "Ini adalah target jaringan neural dalam,\nyang berfungsi dengan sangat baik\npada data kompleks, termasuk data gambar,\ndata audio, dan data video.", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "Kita akan mempelajari jaringan neural\nlebih lanjut di sini.", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "Kita mau punya model yang bisa\nmemelajari non-linearitas tanpa harus\nkita yang tentukan secara manual.", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "Bagaimana caranya?", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "Kita mungkin perlu model\ndengan struktur tambahan.", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "Mari lihat model linear kita.", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "Kita punya beberapa masukan,\ntiap masukan memiliki\nbobot yang dikombinasikan secara linear\nuntuk menghasilkan keluaran.", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "Jika mau mendapatkan non-linearitas,\nmungkin kita perlu lapisan tambahan.", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "Lalu kita dapat menambahkannya dalam\nkombinasi linear yang bagus,\nke dalam lapisan kedua.", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "Lapisan kedua itu menjadi linear yang\ndikombinasikan dan kita belum memperoleh\nnon-linearitas apa pun.", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "Karena kombinasi linear\ndari fungsi linear tetaplah linear.", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "Hal itu tidak bagus, kita jelas\nmembutuhkan lapisan kedua, bukan?", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "Kita tarik lapisan kedua di sini dan...\nkita masih linear.", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "Karena sebanyak apa pun lapisan yang kita\nmau, kombinasi linear dari fungsi linear\nakan tetap linear.", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "Oke, kita perlu tindakan lain.", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "Tindakan itu adalah membiarkan\nnon-linearitas.", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "Non-linearitas itu bisa mencapai keluaran\ndari catatan tersembunyi kecil di sana.", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "Salah satu non-linearitas yang umum kita\ngunakan disebut ray lou.", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "Ray lou ini berperan sebagai fungsi linear\ndan memotongnya ke nol.", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "Jadi jika di bawah nol, Anda adalah\nfungsi linear; jika fungsi mengembalikan\nnilai di bawah nol, kita membatasinya nol.", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "Fungsi non-linear yang paling sederhana,\ndan fungsi ini memungkinkan kita untuk\nmembuat model non-linear.", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "Sekarang kita bisa menggunakan\nnon-linearitas di sini, banyak juga yang\nmenggunakan [unintelligible], tetapi\nternyata ray lou memberikan\nhasil yang canggih untuk sejumlah masalah,\ndan itu sangat sederhana.", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "Setelah memilikinya, kita bisa menumpuk\nlapisan-lapisan ini dan kita bisa membuat\njaringan neural yang rumit\nsecara arbitrer.", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "Saat kita melatih jaringan neural ini,\njelas kita berada dalam pengoptimalan\nnon konveks, jadi inisialisasi\nmungkin penting.", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "Metode yang kita gunakan untuk melatih ini\nadalah varian dari penurunan gradien\nyang disebut propagasi mundur.", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "Pada dasarnya propagasi mundur\nmemungkinkan kita untuk melakukan\npenurunan gradien di pengoptimalan non\nkonveks ini dengan cara yang cukup efisien.", 
          "start": 161.52
        }
      ], 
      "lang": "id"
    }, 
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "\uc774\uc81c \uc774 \ubb38\uc81c\ub97c \uac04\ub2e8\ud55c\n\ube44\uc120\ud615 \ubb38\uc81c\ub85c \ubcfc \uc218 \uc788\uaca0\uc8e0.", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "\ud2b9\uc131 \uad50\ucc28\uacf1\uc744 \uc0ac\uc6a9\ud574\n\uac04\ub2e8\ud788 \ud480 \uc218 \uc788\uc2b5\ub2c8\ub2e4.", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "\ud558\uc9c0\ub9cc \ubb38\uc81c\uac00 \ubcf5\uc7a1\ud574\uc9c0\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c\uc694?", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "\uc608\ub97c \ub4e4\uba74 \uc774\ub7f0 \uacbd\uc6b0 \ub9d0\uc774\uc8e0.", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "\uc11c\ub85c \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \ub098\uc120\uc774\n\ub098\ud0c0\ub0a0\uc9c0\ub3c4 \ubaa8\ub985\ub2c8\ub2e4.", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "\uc774\ub7f0\uc800\ub7f0 \uacc4\uc0b0\uc744 \ud574\uac00\uba70 \uc5b4\ub5a4 \ud2b9\uc131 \uad50\ucc28\uacf1\uc744 \ucd94\uac00\ud574\uc57c \uc88b\uc744\uc9c0\n\uc5f4\uc2ec\ud788 \uad81\ub9ac\ud574\ubcfc \uc218\ub3c4 \uc788\uaca0\uc8e0.", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "\ud558\uc9c0\ub9cc \ub370\uc774\ud130 \uc138\ud2b8\uac00 \uc810\uc810 \ub354 \ubcf5\uc7a1\ud574\uc9c0\uace0 \uc788\ub2e4\uace0\n\uc0dd\uac01\uc774 \ub4e4 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "\uadf8\ub9ac\uace0 \uc6b0\ub9ac\uac00 \uc77c\uc77c\uc774 \uc9c0\uc815\ud574\uc8fc\uc9c0 \uc54a\uc544\ub3c4\n\ubaa8\ub378\uc774 \uc2a4\uc2a4\ub85c \ube44\uc120\ud615\uc131\uc744 \ud559\uc2b5\ud558\uae38 \uc6d0\ud558\uac8c \ub418\uaca0\uc8e0.", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "\uc2ec\uce35 \uc2e0\uacbd\ub9dd\uc774 \ubc14\ub85c \uc774\ub7ec\ud55c \uae30\ub2a5\uc744 \ud569\ub2c8\ub2e4. \uc2ec\uce35 \uc2e0\uacbd\ub9dd\uc740 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130, \uc624\ub514\uc624 \ub370\uc774\ud130,\n\ub3d9\uc601\uc0c1 \ub370\uc774\ud130 \ub4f1 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130\uc5d0\uc11c \ud2b9\ud788 \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "\uc774\ubc88 \uc139\uc158\uc5d0\uc11c\ub294 \uc2e0\uacbd\ub9dd\uc5d0 \uad00\ud574\n\uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "\uc6b0\ub9ac\uc5d0\uac8c\ub294 \uc6b0\ub9ac\uac00 \uc77c\uc77c\uc774 \uc9c0\uc815\ud574\uc8fc\uc9c0 \uc54a\uc544\ub3c4\n\uc2a4\uc2a4\ub85c \ube44\uc120\ud615\uc131\uc744 \ud559\uc2b5\ud558\ub294 \ubaa8\ub378\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "\uc5b4\ub5bb\uac8c \ud558\uba74 \uc774\uac8c \uac00\ub2a5\ud560\uae4c\uc694?", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "\uad6c\uc870\ub97c \ucd94\uac00\ud55c \ubaa8\ub378\uc774 \ud544\uc694\ud558\uaca0\uc8e0.", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "\uc774 \uc120\ud615 \ubaa8\ub378\uc744 \uc0b4\ud3b4\ubcf4\uc8e0.", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "\uc774 \uc120\ud615 \ubaa8\ub378\uc740 \uc120\ud615\uc73c\ub85c \uacb0\ud569\ub41c \uac00\uc911\uce58\ub97c \uac16\ub294\n\uc785\ub825\uac12\uc744 \uac00\uc9c0\uba70, \ucd9c\ub825\uac12\uc744 \ub0b4\ub193\uc2b5\ub2c8\ub2e4.", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "\uc5ec\uae30\uc5d0 \ube44\uc120\ud615\uc131\uc744 \ub354\ud558\ub824\uba74\n\ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4.", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "\uadf8\ub798\uc11c \uc120\ud615\uc73c\ub85c \uc870\ud569\ub41c \uac12\uc744\n\ub450 \ubc88\uc9f8 \ub808\uc774\uc5b4\uc5d0 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "\ub450 \ubc88\uc9f8 \ub808\uc774\uc5b4\ub294 \uc120\ud615\uc73c\ub85c \uacb0\ud569\ub418\uba70\n\uc544\uc9c1 \ube44\uc120\ud615\uc131\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "\uc120\ud615 \ud568\uc218\ub97c \uc120\ud615\uc73c\ub85c \uc870\ud569\ud558\uba74\n\uacc4\uc18d \uc120\ud615\uc774 \ub418\uae30 \ub54c\ubb38\uc774\uc8e0.", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "\uc774\uac78\ub85c\ub294 \ucda9\ubd84\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc9c0\uae08 \ud544\uc694\ud55c \uac83\uc740\n\ub450 \ubc88\uc9f8 \ub808\uc774\uc5b4\uc785\ub2c8\ub2e4, \ub9de\uc8e0?", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "\uadf8\ub798\uc11c \ub450 \ubc88\uc9f8 \ub808\uc774\uc5b4\ub97c \ub354\ud588\uc9c0\ub9cc,\n\uc5ec\uc804\ud788 \uc120\ud615\uc785\ub2c8\ub2e4.", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "\uc544\ubb34\ub9ac \ub9ce\uc740 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud558\ub354\ub77c\ub3c4 \uc120\ud615 \ud568\uc218\ub97c \uc120\ud615\uc73c\ub85c \uacb0\ud569\ud558\uba74\n\uacc4\uc18d \uc120\ud615\uc774 \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "\ub2e4\ub978 \ubc29\ubc95\uc744 \uc2dc\ub3c4\ud574\ubd10\uc57c\uaca0\ub124\uc694.", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "\uc774\ub97c \uc704\ud574\uc11c\ub294 \ube44\uc120\ud615\uc131\uc744 \uc801\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "\uc774\ub7ec\ud55c \ube44\uc120\ud615\uc131\uc740 \uc228\uaca8\uc838 \uc788\ub294 \ubd80\ubd84\uc758 \ucd9c\ub825\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "\uc77c\ubc18\uc801\uc73c\ub85c \ud754\ud788 \uc0ac\uc6a9\ud558\ub294 \ube44\uc120\ud615\uc131 \uc911 \ud558\ub098\ub294 ReLU\uc785\ub2c8\ub2e4.", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "ReLU\ub294 \uc120\ud615 \ud568\uc218\ub97c 0\uc5d0\uc11c \uc790\ub985\ub2c8\ub2e4.", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "0 \uc774\uc0c1\uc77c \ub54c\ub294 \uc120\ud615 \ud568\uc218\uc9c0\ub9cc, \ud568\uc218\uac00 0\ubcf4\ub2e4 \uc791\uc740 \uac12\uc744 \ub0b4\ub193\uc73c\uba74\n\uc774 \uac12\uc744 0\uc73c\ub85c \ub3cc\ub9bd\ub2c8\ub2e4.", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "\uc774\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ube44\uc120\ud615 \ud568\uc218\uc774\uba70 \uc774\ub97c \uc0ac\uc6a9\ud558\uc5ec\n\ube44\uc120\ud615 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "\uc774\uc81c \uc5ec\uae30\uc5d0 \uc5b4\ub5a4 \ube44\uc120\ud615\uc131\uc774\ub4e0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \uc2dc\uadf8\ubaa8\uc774\ub4dc\ub3c4 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uc9c0\ub9cc, ReLU\ub97c \uc0ac\uc6a9\ud558\uba74\n\ub354 \ub2e4\uc591\ud55c \ubb38\uc81c\uc5d0 \ucd5c\uc0c1\uc758 \uacb0\uacfc\ub97c \ub0b4\ub193\uc744 \uc218 \uc788\uc73c\uba70, \uc2ec\uc9c0\uc5b4 \uc0ac\uc6a9\ud558\uae30\uc5d0 \uac04\ub2e8\ud569\ub2c8\ub2e4.", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "\uc774\ub7ec\ud55c \ubc29\ubc95\uc73c\ub85c \uc5ec\ub7ec \ub808\uc774\uc5b4\ub97c \uc313\uc544 \uc784\uc758\ub85c \ubcf5\uc7a1\ud55c \uc2e0\uacbd\ub9dd\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc8e0.", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "\uc774\ub7ec\ud55c \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c\ub294 \ubcfc\ub85d \ucd5c\uc801\ud654\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c\n\ucd08\uae30\ud654\uac00 \uc911\uc694\ud569\ub2c8\ub2e4.", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \ub54c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \uacbd\uc0ac\ud558\uac15\ubc95\uc758 \uc77c\uc885\uc73c\ub85c,\n\uc5ed\uc804\ud30c\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4.", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "\uc5ed\uc804\ud30c\ub97c \uc0ac\uc6a9\ud558\uba74 \ubcfc\ub85d \ucd5c\uc801\ud654\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uc0c1\ub2f9\ud788 \ud6a8\uc728\uc801\uc73c\ub85c\n\uacbd\uc0ac\ud558\uac15\ubc95\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.", 
          "start": 161.52
        }
      ], 
      "lang": "ko"
    }, 
    {
      "captions": [
        {
          "dur": 4.58, 
          "text": "En este punto, debemos identificarlo\ncomo un problema simple y no lineal.", 
          "start": 0.0
        }, 
        {
          "dur": 3.28, 
          "text": "Podemos resolverlo f\u00e1cilmente\ncon productos de combinaci\u00f3n de atributos.", 
          "start": 4.58
        }, 
        {
          "dur": 3.5, 
          "text": "\u00bfPero qu\u00e9 sucede si se hace m\u00e1s complejo?", 
          "start": 7.86
        }, 
        {
          "dur": 4.36, 
          "text": "Observemos el siguiente caso.", 
          "start": 11.36
        }, 
        {
          "dur": 4.86, 
          "text": "Quiz\u00e1s tengamos un conjunto de espirales\nque interact\u00faan entre ellas.", 
          "start": 15.72
        }, 
        {
          "dur": 4.6, 
          "text": "Podemos calcular los productos\nde la combinaci\u00f3n de atributos para agregar.", 
          "start": 20.58
        }, 
        {
          "dur": 3.62, 
          "text": "Sin duda, los conjuntos de datos\nser\u00e1n m\u00e1s complejos.", 
          "start": 25.18
        }, 
        {
          "dur": 8.0, 
          "text": "Tambi\u00e9n queremos que los modelos aprendan\nlas no linealidades sin nuestra intervenci\u00f3n.", 
          "start": 28.8
        }, 
        {
          "dur": 8.18, 
          "text": "Las redes neurales profundas desentra\u00f1ar\u00e1n\ndatos complejos: im\u00e1genes, audio y video.", 
          "start": 36.8
        }, 
        {
          "dur": 2.76, 
          "text": "Aprenderemos m\u00e1s\nsobre las redes neurales en esta secci\u00f3n.", 
          "start": 44.98
        }, 
        {
          "dur": 6.32, 
          "text": "Queremos lograr modelos que aprendan\nlas no linealidad sin nuestra intervenci\u00f3n.", 
          "start": 47.74
        }, 
        {
          "dur": 0.88, 
          "text": "\u00bfC\u00f3mo lo haremos?", 
          "start": 54.06
        }, 
        {
          "dur": 3.58, 
          "text": "Necesitemos un modelo\ncon una estructura adicional.", 
          "start": 54.94
        }, 
        {
          "dur": 2.0, 
          "text": "Observemos nuestro modelo lineal:", 
          "start": 58.52
        }, 
        {
          "dur": 5.12, 
          "text": "una serie de entradas con una ponderaci\u00f3n\ncombinada lineal para producir un resultado.", 
          "start": 60.52
        }, 
        {
          "dur": 4.92, 
          "text": "Si queremos una no linealidad,\nnecesitaremos una capa adicional.", 
          "start": 65.64
        }, 
        {
          "dur": 5.84, 
          "text": "Podemos agregar una combinaci\u00f3n lineal\nen una segunda capa.", 
          "start": 70.56
        }, 
        {
          "dur": 5.44, 
          "text": "Obtenemos una combinaci\u00f3n lineal,\npero a\u00fan no llegamos a una no linealidad", 
          "start": 76.4
        }, 
        {
          "dur": 4.0, 
          "text": "porque una combinaci\u00f3n\nde funciones lineales sigue siendo lineal.", 
          "start": 81.84
        }, 
        {
          "dur": 3.2, 
          "text": "Por lo que necesitamos una segunda capa.", 
          "start": 85.84
        }, 
        {
          "dur": 3.64, 
          "text": "La ponemos all\u00ed,\npero seguimos teniendo un resultado lineal.", 
          "start": 89.04
        }, 
        {
          "dur": 6.7, 
          "text": "Por m\u00e1s que sigamos agregando capas,\nel resultado ser\u00e1 el mismo.", 
          "start": 92.68
        }, 
        {
          "dur": 1.76, 
          "text": "Debemos recurrir a otro m\u00e9todo.", 
          "start": 99.38
        }, 
        {
          "dur": 3.64, 
          "text": "Tenemos que trabajar en una no linealidad.", 
          "start": 101.14
        }, 
        {
          "dur": 4.32, 
          "text": "Puede estar en el resultado\nde cualquiera de nuestras peque\u00f1as notas.", 
          "start": 104.78
        }, 
        {
          "dur": 4.9, 
          "text": "Una no linealidad com\u00fan es ReLU.", 
          "start": 109.1
        }, 
        {
          "dur": 4.36, 
          "text": "Toma una funci\u00f3n lineal y la deja en cero.", 
          "start": 114.0
        }, 
        {
          "dur": 6.46, 
          "text": "Si es mayor que cero, es una funci\u00f3n lineal.\nSi es menor, se limita a cero.", 
          "start": 118.36
        }, 
        {
          "dur": 5.56, 
          "text": "Es la funci\u00f3n no lineal m\u00e1s simple\nque nos permite crear modelos no lineales.", 
          "start": 124.82
        }, 
        {
          "dur": 10.86, 
          "text": "Si bien cualquier no linealidad es v\u00e1lida,\nReLU es simple y soluciona varios problemas.", 
          "start": 130.38
        }, 
        {
          "dur": 6.8, 
          "text": "Ahora, podemos apilar estas capas\ny crear redes complejas de forma arbitraria.", 
          "start": 141.24
        }, 
        {
          "dur": 8.1, 
          "text": "Al entrenarlas, la optimizaci\u00f3n no es convexa\ny, por ello, la inicializaci\u00f3n es importante.", 
          "start": 148.04
        }, 
        {
          "dur": 5.38, 
          "text": "Para ello, usamos una variante de descenso\nde gradientes llamada propagaci\u00f3n inversa.", 
          "start": 156.14
        }, 
        {
          "dur": 7.82, 
          "text": "Logramos un descenso de gradientes eficiente\nen esta optimizaci\u00f3n no convexa.", 
          "start": 161.52
        }
      ], 
      "lang": "es-419"
    }
  ]
}